library(quantmod)
library(ggplot2)
library(tseries)
library(dplyr)
# We retrieve NOK/EUR daily exchange rate data from 2015 to 2025 using Yahoo Finance API
getSymbols("NOKEUR=X", src = "yahoo", from = "2015-01-01", to = "2025-01-01")
# We convert the data to dataframe and adjust column names
nokeur_data <- data.frame(Date = index(`NOKEUR=X`), coredata(`NOKEUR=X`))
nokeur_data <- na.omit(nokeur_data)
colnames(nokeur_data) <- c("Date", "Open", "High", "Low", "Close", "Volume", "Adjusted")
ggplot(nokeur_data, aes(x = Date, y = Close)) +
geom_line(color = "darkorchid4") +
labs(title = "NOK/EUR Exchange Rate",
x = "Date", y = "Exchange Rate") +
theme_minimal()
library(quantmod)
library(ggplot2)
library(tseries)
library(dplyr)
# We retrieve NOK/EUR daily exchange rate data from 2015 to 2025 using Yahoo Finance API
getSymbols("NOKEUR=X", src = "yahoo", from = "2015-01-01", to = "2025-01-01")
# We convert the data to dataframe and adjust column names
nokeur_data <- data.frame(Date = index(`NOKEUR=X`), coredata(`NOKEUR=X`))
nokeur_data <- na.omit(nokeur_data)
colnames(nokeur_data) <- c("Date", "Open", "High", "Low", "Close", "Volume", "Adjusted")
ggplot(nokeur_data, aes(x = Date, y = Close)) +
geom_line(color = "darkorchid4") +
labs(title = "NOK/EUR Exchange Rate",
x = "Date", y = "Exchange Rate") +
theme_minimal()
library(quantmod)
library(ggplot2)
library(tseries)
library(dplyr)
# We retrieve NOK/EUR daily exchange rate data from 2015 to 2025 using Yahoo Finance API
getSymbols("NOKEUR=X", src = "yahoo", from = "2015-01-01", to = "2025-01-01")
# We convert the data to dataframe and adjust column names
nokeur_data <- data.frame(Date = index(`NOKEUR=X`), coredata(`NOKEUR=X`))
nokeur_data <- na.omit(nokeur_data)
colnames(nokeur_data) <- c("Date", "Open", "High", "Low", "Close", "Volume", "Adjusted")
ggplot(nokeur_data, aes(x = Date, y = Close)) +
geom_line(color = "darkorchid4") +
labs(title = "NOK/EUR Exchange Rate",
x = "Date", y = "Exchange Rate") +
theme_minimal()
# Most time-series models require stationary data. Log returns help achieve stationarity.
nokeur_data <- nokeur_data %>%
mutate(Log_Returns = log(Close / lag(Close)))
# Remove NA values caused by lag
nokeur_data <- na.omit(nokeur_data)
# We plot the data to visualy inspect stationarity, volatility clustering,...
ggplot(nokeur_data, aes(x = Date, y = Log_Returns)) +
geom_line(color = "cyan4") +
labs(title = "Log Returns of NOK/EUR Exchange Rate",
x = "Date", y = "Log Returns") +
theme_minimal()
# We confirm stationarity with ADF test (H0 = Time series is non-stationary)
adf.test(nokeur_data$Log_Returns, alternative = "stationary")
# ACF and PACF of Log Returns
par(mfrow = c(1, 2))
acf(nokeur_data$Log_Returns, main = "ACF of Log Returns")
pacf(nokeur_data$Log_Returns, main = "PACF of Log Returns")
# ACF and PACF of squared Log Returns to check for volatility clustering and non-linear dependence
par(mfrow = c(1, 2))
acf(nokeur_data$Log_Returns^2, main = "ACF of Squared Log Returns")
pacf(nokeur_data$Log_Returns^2, main = "PACF of Squared Log Returns")
# squared returns show significant autocorrelation -> we confirm that with the following test:
lags <- 1:10
ljung_box_results <- data.frame(
lag = lags,
Q_statistic = sapply(lags, function(lag) Box.test(
nokeur_data$Log_Returns^2,
lag = lag,
type = "Ljung-Box")$statistic),
p_value = sapply(lags, function(lag) Box.test(
nokeur_data$Log_Returns^2,
lag = lag,
type = "Ljung-Box")$p.value)
)
ljung_box_results
library(quantmod)
library(ggplot2)
library(tseries)
library(dplyr)
# We retrieve NOK/EUR daily exchange rate data from 2015 to 2025 using Yahoo Finance API
getSymbols("NOKEUR=X", src = "yahoo", from = "2015-01-01", to = "2025-01-01")
# We convert the data to dataframe and adjust column names
nokeur_data <- data.frame(Date = index(`NOKEUR=X`), coredata(`NOKEUR=X`))
nokeur_data <- na.omit(nokeur_data)
colnames(nokeur_data) <- c("Date", "Open", "High", "Low", "Close", "Volume", "Adjusted")
ggplot(nokeur_data, aes(x = Date, y = Close)) +
geom_line(color = "darkorchid4") +
labs(title = "NOK/EUR Exchange Rate",
x = "Date", y = "Exchange Rate") +
theme_minimal()
library(quantmod)
library(ggplot2)
library(tseries)
library(dplyr)
# We retrieve NOK/EUR daily exchange rate data from 2015 to 2025 using Yahoo Finance API
getSymbols("NOKEUR=X", src = "yahoo", from = "2015-01-01", to = "2025-01-01")
# We convert the data to dataframe and adjust column names
nokeur_data <- data.frame(Date = index(`NOKEUR=X`), coredata(`NOKEUR=X`))
nokeur_data <- na.omit(nokeur_data)
colnames(nokeur_data) <- c("Date", "Open", "High", "Low", "Close", "Volume", "Adjusted")
ggplot(nokeur_data, aes(x = Date, y = Close)) +
geom_line(color = "darkorchid4") +
labs(title = "NOK/EUR Exchange Rate",
x = "Date", y = "Exchange Rate") +
theme_minimal()
library(quantmod)
library(ggplot2)
library(tseries)
library(dplyr)
# We retrieve NOK/EUR daily exchange rate data from 2015 to 2025 using Yahoo Finance API
getSymbols("NOKEUR=X", src = "yahoo", from = "2015-01-01", to = "2025-01-01")
# We convert the data to dataframe and adjust column names
nokeur_data <- data.frame(Date = index(`NOKEUR=X`), coredata(`NOKEUR=X`))
nokeur_data <- na.omit(nokeur_data)
colnames(nokeur_data) <- c("Date", "Open", "High", "Low", "Close", "Volume", "Adjusted")
ggplot(nokeur_data, aes(x = Date, y = Close)) +
geom_line(color = "darkorchid4") +
labs(title = "NOK/EUR Exchange Rate",
x = "Date", y = "Exchange Rate") +
theme_minimal()
# Most time-series models require stationary data. Log returns help achieve stationarity.
nokeur_data <- nokeur_data %>%
mutate(Log_Returns = log(Close / lag(Close)))
# Remove NA values caused by lag
nokeur_data <- na.omit(nokeur_data)
# We plot the data to visualy inspect stationarity, volatility clustering,...
ggplot(nokeur_data, aes(x = Date, y = Log_Returns)) +
geom_line(color = "cyan4") +
labs(title = "Log Returns of NOK/EUR Exchange Rate",
x = "Date", y = "Log Returns") +
theme_minimal()
# We confirm stationarity with ADF test (H0 = Time series is non-stationary)
adf.test(nokeur_data$Log_Returns, alternative = "stationary")
# ACF and PACF of Log Returns
par(mfrow = c(1, 2))
acf(nokeur_data$Log_Returns, main = "ACF of Log Returns")
pacf(nokeur_data$Log_Returns, main = "PACF of Log Returns")
# ACF and PACF of squared Log Returns to check for volatility clustering and non-linear dependence
par(mfrow = c(1, 2))
acf(nokeur_data$Log_Returns^2, main = "ACF of Squared Log Returns")
pacf(nokeur_data$Log_Returns^2, main = "PACF of Squared Log Returns")
# squared returns show significant autocorrelation -> we confirm that with the following test:
lags <- 1:10
ljung_box_results <- data.frame(
lag = lags,
Q_statistic = sapply(lags, function(lag) Box.test(
nokeur_data$Log_Returns^2,
lag = lag,
type = "Ljung-Box")$statistic),
p_value = sapply(lags, function(lag) Box.test(
nokeur_data$Log_Returns^2,
lag = lag,
type = "Ljung-Box")$p.value)
)
ljung_box_results
library(quantmod)
library(ggplot2)
library(tseries)
library(dplyr)
# We retrieve NOK/EUR daily exchange rate data from 2015 to 2025 using Yahoo Finance API
getSymbols("NOKEUR=X", src = "yahoo", from = "2015-01-01", to = "2025-01-01")
# We convert the data to dataframe and adjust column names
nokeur_data <- data.frame(Date = index(`NOKEUR=X`), coredata(`NOKEUR=X`))
nokeur_data <- na.omit(nokeur_data)
colnames(nokeur_data) <- c("Date", "Open", "High", "Low", "Close", "Volume", "Adjusted")
ggplot(nokeur_data, aes(x = Date, y = Close)) +
geom_line(color = "darkorchid4") +
labs(title = "NOK/EUR Exchange Rate",
x = "Date", y = "Exchange Rate") +
theme_minimal()
# Most time-series models require stationary data. Log returns help achieve stationarity.
nokeur_data <- nokeur_data %>%
mutate(Log_Returns = log(Close / lag(Close)))
# Remove NA values caused by lag
nokeur_data <- na.omit(nokeur_data)
# We plot the data to visualy inspect stationarity, volatility clustering,...
ggplot(nokeur_data, aes(x = Date, y = Log_Returns)) +
geom_line(color = "cyan4") +
labs(title = "Log Returns of NOK/EUR Exchange Rate",
x = "Date", y = "Log Returns") +
theme_minimal()
# We confirm stationarity with ADF test (H0 = Time series is non-stationary)
adf.test(nokeur_data$Log_Returns, alternative = "stationary")
# ACF and PACF of Log Returns
par(mfrow = c(1, 2))
acf(nokeur_data$Log_Returns, main = "ACF of Log Returns")
pacf(nokeur_data$Log_Returns, main = "PACF of Log Returns")
# ACF and PACF of squared Log Returns to check for volatility clustering and non-linear dependence
par(mfrow = c(1, 2))
acf(nokeur_data$Log_Returns^2, main = "ACF of Squared Log Returns")
pacf(nokeur_data$Log_Returns^2, main = "PACF of Squared Log Returns")
# squared returns show significant autocorrelation -> we confirm that with the following test:
lags <- 1:10
ljung_box_results <- data.frame(
lag = lags,
Q_statistic = sapply(lags, function(lag) Box.test(
nokeur_data$Log_Returns^2,
lag = lag,
type = "Ljung-Box")$statistic),
p_value = sapply(lags, function(lag) Box.test(
nokeur_data$Log_Returns^2,
lag = lag,
type = "Ljung-Box")$p.value)
)
ljung_box_results
